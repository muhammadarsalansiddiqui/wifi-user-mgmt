#!/bin/sh

sqlite_sql() {
	echo $(sqlite3 freeradius.db "$1")
}

random_password() {
	< /dev/urandom tr -dc _A-Z-a-z-0-9|head -c"$1"
}

add_user() {
	# Ask for username.
	exec 3>&1;
	username=$(dialog --inputbox "Enter desired username" 0 0 2>&1 1>&3)
	exitcode=$?
	exec 3>&-;

	# Check if username is valid.
	if echo "$username" | grep -q '^[A-Za-z]\+$'; then
		matches=$(sqlite_sql "SELECT COUNT(*) FROM radcheck WHERE username='$username';")
		if [ $matches -gt 0 ]; then
			dialog --msgbox "Username $username already taken." 0 0
			exit 1
		fi
		
		# Username not taken. Now continue and ask for user group.
		exec 3>&1;
		group=$(dialog --menu "Choose user group" 0 0 0 friends "Friends (VLAN 6)" family "Family (VLAN 1)" 2>&1 1>&3)
		exitcode=$?;
		exec 3>&-;
		if [ $exitcode -ne 0 ]; then exit 0; fi

		# Now ask for password, or autogenerate if empty.
		exec 3>&1;
		password=$(dialog --insecure --passwordbox "Enter desired password (or empty to autogenerate)" 0 0 2>&1 1>&3)
		autogenerated=0
		exitcode=$?;
		exec 3>&-;
		if [ $exitcode -ne 0 ]; then exit 0; fi
		if [ -z $password ]; then
			# Empty password, autogenerate a random one of 10 letters/digits.
			password=$(random_password 10)
			autogenerated=1
		fi

		# Now calculate the NTLM-hash of the given password.
		hash=$(smbencrypt "$password" 2> /dev/null | cut -f 2)

		# Now insert the user into the database.
		sqlite_sql "INSERT INTO radcheck (username,attribute,op,value) VALUES ('$username','NT-Password',':=','$hash');"
		sqlite_sql "INSERT INTO radusergroup (username,groupname) VALUES ('$username','$group');"

		if [ $autogenerated -eq 1 ]; then
			dialog --msgbox "User added successfully. Password is: $password" 0 0
		else
			dialog --msgbox "User added successfully" 0 0
		fi
	else
		# Invalid username.
		dialog --msgbox "Invalid username. Only A-Z and a-z is allowed." 0 0
		exit 1
	fi
}

change_password() {
	# Now ask for password, or autogenerate if empty.
	exec 3>&1;
	password=$(dialog --insecure --passwordbox "Enter desired password (or empty to autogenerate)" 0 0 2>&1 1>&3)
	autogenerated=0
	exitcode=$?;
	exec 3>&-;
	if [ $exitcode -ne 0 ]; then exit 0; fi
	if [ -z $password ]; then
		# Empty password, autogenerate a random one of 10 letters/digits.
		password=$(random_password 10)
		autogenerated=1
	fi

	# Now calculate the NTLM-hash of the given password.
	hash=$(smbencrypt "$password" 2> /dev/null | cut -f 2)

	# Now update the password in the database.
	sqlite_sql "UPDATE radcheck SET value='$hash' WHERE username='$1' AND attribute='NT-Password';"

	if [ $autogenerated -eq 1 ]; then
		dialog --msgbox "Password updated successfully. Password is: $password" 0 0
	else
		dialog --msgbox "Password updated successfully" 0 0
	fi
}

disable_account() {
	echo "Should disable account"
}

enable_account() {
	echo "Should enable account"
}

modify_user() {
	# Get list of users.
	users=$(sqlite_sql "SELECT username FROM radcheck;")

	# Present menu with all users.
	exec 3>&1;
	username=$(dialog --no-items --menu "Choose user to modify" 0 0 0 $users 2>&1 1>&3)
	exitcode=$?
	exec 3>&-;

	if [ $exitcode -ne 0 ]; then exit 1; fi

	# Show new menu with options.
	exec 3>&1;
	modifytask=$(dialog --menu "What to do with user \"$username\"?" 0 0 0 change "Change password" disable "Disable account" enable "Enable account" 2>&1 1>&3)
	exitcode=$?
	exec 3>&-;

	# Handle different cases.
	case "$modifytask" in
		change)
			change_password "$username"
			;;
		disable)
			disable_account
			;;
		enable)
			enable_account
			;;
		*)
			echo "Something went wrong :("
	esac
}

delete_user() {
	# Get list of users.
	users=$(sqlite_sql "SELECT username FROM radcheck;")

	# Present menu with all users.
	exec 3>&1;
	username=$(dialog --no-items --menu "Choose user to delete" 0 0 0 $users 2>&1 1>&3)
	exitcode=$?
	exec 3>&-;

	if [ $exitcode -ne 0 ]; then exit 1; fi

	# Show confirmation.
	dialog --defaultno --yesno "Really delete user \"$username\"?" 0 0
	if [ $? -eq 0 ]; then
		# Delete.
		sqlite_sql "DELETE FROM radcheck WHERE username='$username';"
		sqlite_sql "DELETE FROM radusergroup WHERE username='$username';"
		
		dialog --msgbox "User \"$username\" deleted." 0 0
	fi
}

# Show task list.
exec 3>&1;
task=$(dialog --menu "What do you want to do?" 0 0 0 add "Add user" modify "Modify user" delete "Delete user" 2>&1 1>&3)
exitcode=$?;
exec 3>&-;

if [ $exitcode -ne 0 ]; then exit 0; fi

case "$task" in
	add)
		add_user
		;;
	modify)
		modify_user
		;;
	delete)
		delete_user
		;;
	*)
		echo "Something is wrong :("
		exit 1
esac
